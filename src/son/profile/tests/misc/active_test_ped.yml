---
#
# This is an example for a profiling experiment descriptor (PED).
# It defines profiling experiments for the sonata-proxy-lb-service-emu example service.
#
descriptor_version: 0.1
# SONATA-like identifier (just in case we need it)
vendor: "eu.sonata-nfv"
name: "sonata-proxy-lb-profile-experiment"
version: "0.1"
author: "Eduard Maas, Paderborn University, edmaas@mail.uni-paderborn.de"
description: ""

# path to the package of the service we want to profile
service_package: "./sonata-proxy-lb-service.son"

#
# First type of experiments: Service level experiments
#
service_experiments:
  - name: "service_throughput"
    description: "iperf test for entire service"
    repetitions: 1
    time_limit: "60"
    # NSD to be used (SONATA-like vendor.name.version reference)
    service: "eu.sonata-nfv.sonata-active-test-service.0.1"
    # additional containers for traffic generation/measurements (like SAPs)
    measurement_points:
      - name: "mp.input"
        connection_point: "ns:input"
        container: "sonatanfv/sonata-apache-bench-vnf"
        cmd_start: "ab -n ${10 to 101 step 20} -X 20.0.0.2:3128 http://30.0.0.2:5202/ > /mnt/share/ab.txt 2>&1"
        commands:
            - {
               10: "echo 'test10' > /mnt/share/test.txt",
               30: "echo 'test30' >> /mnt/share/test.txt",
               40: "echo 'test40' >> /mnt/share/test.txt"
           }
        cmd_stop: null
    # resource configurations to be tested during profiling run (defined per VNF)
    resource_limitations:
      # again: SONATA-like references
      - function: "mp.input"
        cpu_bw: 0.2
        cpu_cores: 1
        mem_max: 512
        mem_swap_max: null
        io_bw: null

#
 # Second type of experiments: VNF level experiments (individually test each VNF)
 #
 # function_experiments:
 #  - name: "func_fw_throughput"
 #    description: "iperf test for fw vnf"
 #    repetitions: 2
 #    time_limit: "120"
 #    # VNFD to be used (SONATA-like vendor.name.version reference)
 #    function: "eu.sonata-nfv.fw-vnf.0.1"
 #    # additional containers for traffic generation/measurements (like SAPs)
 #    measurement_points:
 #      - name: "mp.output"
 #        connection_point: "fwout"
 #        container: "mpeuster/p2-mp"
 #        cmd_start: "iperf -s"
 #        cmd_stop: null
 #      - name: "mp.input"
 #        connection_point: "fwin"
 #        container: "mpeuster/p2-mp"
 #        cmd_start: "iperf -c 1.1.1.1 -t 120"
 #        cmd_stop: null
 #    # resource configurations to be tested during profiling run (defined per VNF)
 #    resource_limitations:  # shortened (fields are optional)
 #      # again: SONATA-like references
 #      - function: "eu.sonata-nfv.fw-vnf.0.1"
 #        cpu_bw: "${0.01 to 0.02 step 0.01}" # Omnet++ style parameter study macros
 #      - function: "mp.input"
 #        cpu_bw: 0.2
 #      - function: "mp.output"
 #        cpu_bw: 0.2
 # - name: "func_vtc_throughput"
 #    description: "iperf test for vtc vnf"
 #    repetitions: 1
 #    time_limit: "120"
 #    # VNFD to be used (SONATA-like vendor.name.version reference)
 #    function: "eu.sonata-nfv.vtc-vnf.0.1"
 #    # additional containers for traffic generation/measurements (like SAPs)
 #   measurement_points:
 #      - name: "mp.output"
 #        connection_point: "output"
 #        container: "mpeuster/p2-mp"
 #        cmd_start: "iperf -s"
 #        cmd_stop: null
 #      - name: "mp.input"
 #        connection_point: "input"
 #        container: "mpeuster/p2-mp"
 #        cmd_start: "iperf -c 1.1.1.1 -t 120"
 #        cmd_stop: null
 #    # resource configurations to be tested during profiling run (defined per VNF)
 #    resource_limitations: # shortened (fields are optional)
 #      # again: SONATA-like references
 #      - function: "eu.sonata-nfv.vtc-vnf.0.1"
 #        cpu_bw: 0.4
 #        mem_max: "${64}"
 #      - function: "mp.input"
 #        cpu_bw: 0.2
 #        mem_max: 18
 #      - function: "mp.output"
 #        cpu_bw: 0.2
 #        mem_max: 512

